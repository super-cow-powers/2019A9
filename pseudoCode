#High Level pseudo code for the system.
#Some functions/subroutines will be defined,
#lower-level ones will not so as to keep this
#fairly brief.

#This may be changed with no notice, or may not be entirely accurate -
#however it should still represent the spirit of the real code.
#(Even if the real code is incomplete.)
#David.

BEGIN FUNCTION Setup:
	 ARM_SystemInit();
	 External_Oscilator();
	 UART();
	 Relays();
	 ADCs();
	 Buttons();
	 IRQ_NVIC();
END FUNCTION

BEGIN FUNCTION Update_USART_Output:
      	 SerialWrite(GetOutput+GetMode+"\n");
END Function

BEGIN FUNCTION Update_LCD:
      	 Clear_LCD();
      	 Centre(LCD_Write(GetOutput));
	 LCD_GOTO(NewLine);
	 LCD_Write(GetMeasureType);
END Function

BEGIN FUNCTION GetOutput:
      	 RETURN STRING(get<Current_Mode>());
END FUNCTION

BEGIN FUNCTION Get<*V,*I>:
      	 WHILE (measurement TOO SMALL):
	       TRY NEXT <>_Range;
	       IF TRIED-ALL: RETURN 0;
	 END WHILE
      	 RETURN measurement*Range_scale_factor;
END FUNCTION

BEGIN FUNCTION Get<R>:
      	 LOCAL intermediate_V=measurement*Voltage_Range_scale_factor;
	 WHILE (measurement TOO SMALL):
	       TRY NEXT Voltage_Range;
	       intermediate_V=measurement*Voltage_Range_scale_factor;
	       IF TRIED-ALL: RETURN 0;
	 END WHILE
	 RETURN intermediate_V/CCS_Current;
END FUNCTION

BEGIN FUNCTION Get<FRQ>:
         EXT_Prescaler = 1;
      	 COUNT MCU_Clock_Cycles BETWEEN EXT_Rising_Edge;
	 WHILE (COUNT TOO SMALL):
	       TRY INCREASE EXT_Prescaler;
	       COUNT MCU_Clock_Cycles BETWEEN EXT_Rising_Edge;
	       IF TRIED-ALL: RETURN BIG_NUM;
	 END WHILE
	 RETURN 1/(COUNT/MCU_FRQ);
END FUNCTION

END FUNCTION

PROGRAM Multimeter
	Setup();
	Clear_LCD();
	Set_Defaults();
	Find_ADC_Zero_Point();

	Update_LCD();

	WHILE TRUE:
	      Every 200 mS DO:
	      	    Update_USART_Output();
	      	    Update_LCD();
	      END DO
		    
	      Every 10mS DO:
	      	    Read button_IRQ_buffer;
		    UPDATE_BUTTONS();
		    UPDATE_MODE();
	      END DO
		    
	       IF (ADC_BUFFER is full):
	       	  ON current_mode_type SWITCH:
	       	     case MEAN:
		    	  measurement=ARM_DSP_MEAN(ADC_BUFFER);
		     case MAX:
		    	  measurement=ARM_DSP_MAX(ADC_BUFFER);
		     case RMS:
		    	  measurement=ARM_DSP_RMS(ADC_BUFFER);
		  EMPTY(ADC_BUFFER);
	        END IF

		IF (new ADC reading):
		   	ADJUST_FOR_ZERO_POINT(adc_val);
			COPY(adc_val TO ENDOF ADC_BUFFER);
			CLEAR reading_flag;
		END IF

END PROGRAM

HANDLE IRQs